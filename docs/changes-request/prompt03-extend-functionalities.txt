You are about to continue a development iteration of software based on a set of user stories described in a blueprint document. 

The whole iteration is divided into 4 phases:
- Laid the foundation (project structure, placeholders, key abstractions)
- Complete the Minimum Viable Implementation (MVI) to satisfy core acceptance criteria
- Extend the implementation to support more scenarios and edge cases
- Refine and stabilize the codebase for clarity, maintainability, and performance

The initial blueprint is:
- docs/changes-request/2025-03-31-081819-introduce-step-prompt.blueprint.md
Retrieve the user stories mentioned in the blueprint are:
- docs/user-stories/code-command/08-introduce-prompt-in-existing-step-definition.md

You have already:
- Laid the groundwork by scaffolding the solution and defining high-level architecture: read it using: cat 2025-03-31-081819-introduce-step-prompt.blueprint.md.01-foundation.accomplished.md
- Implemented a Minimal Viable Implementation (MVI) that satisfies the basic functionality required to pass the initial test suite: read it using: cat docs/changes-request/2025-03-31-081819-introduce-step-prompt.blueprint.md.02-mvi.accomplished.md

### üéØ Goals of this Phase

- Extend the core logic to handle **all scenarios** described in the user stories and their acceptance criteria.
- Add meaningful logic to improve completeness while maintaining modularity.
- Update or create **new tests** to ensure coverage of extended functionality.

### üß™ Formal Test Execution ‚Äì Mandatory

At the end of this phase, you **must run the complete formal test suite**:
- All existing and new tests **must pass**.
- Add tests for any uncovered edge cases.
- Document any remaining limitations or areas needing future refinement.

### ‚úÖ Guidelines

- Maintain alignment with the blueprint‚Äôs structure.
- Keep the code production-quality: clear, modular, and documented.
- Refactor as needed to support new logic, but avoid premature optimization.
- Do not yet focus on performance tuning or polishing‚Äîprioritize completeness and correctness.

### üõ†Ô∏è Your task

1. For each user story:
   - Validate the acceptance criterias already implemented.
   - Review the acceptance criteria not yet implemented.
   - Identify edge cases and secondary scenarios.
   - Extend the implementation accordingly.

2. For each new case:
   - Add or update tests.
   - Ensure the verification logic (e.g., test assertions) remains aligned and meaningful for the user story.

3. Run the full test suite and validate all tests pass.
4. At the end of your task write the summary of what you accomplished in docs/changes-request/2025-03-26-020055-code-command.code.md.03-extend-functionalities.accomplished.md
At the end of your task write the summary of what you accomplished in docs/changes-request/2025-03-26-020055-code-command.code.md.03-extend-functionalities.accomplished.md.

The accomplishment report is not a summary, is a compass to the changes you made, hence avoid general statements/claim, be precise:
Use always short code references (no code at all, 
 just a compact/understable reference to lookup for, do not use line numbers) 
 as foundation of your statements
 For example:
 - Instead of "Added tests for ..." / "Updated tests for ... " show me which test case has been added (using code references)
 - Instead of "Message templates are now centralized with clear naming conventions" show me where to find them (using code references)
 - Include a section of "blind spot" if any: leverage test coverage report to reinforce your statements
 - Include a dedicated section for potentially still not yet well covered acceptance criteria.

--- 


Your task now is to proceed to **expand the implementation** to cover additional use cases, edge cases, and deferred features, as described in the blueprint.