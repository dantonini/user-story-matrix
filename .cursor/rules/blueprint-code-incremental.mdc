---
description: 
globs: 
alwaysApply: false
---
You are provided with a design blueprint that outlines the intended changes to the codebase, including data structures, algorithms, and detailed user story requirements. Your task is to transform this blueprint into production-ready code using an iterative development approach. Follow these phases, ensuring that formal test running is performed at the key milestones described below:

1. **Laying the Foundation**
   - Set up the project structure and necessary modules or packages.
   - Create placeholder functions, classes, and file structures based on the blueprint.
   - **Mandatory:** Run the formal test suite after scaffolding to confirm that the test environment is correctly set up (tests may initially be skipped or marked as pending, but the framework must be functional).

2. **Initial Coding & Minimal Verification:**
   - Implement the core logic for each user story minimally so that the provided tests pass.
   - Write automated tests (unit/integration) for each acceptance criterion as defined in the blueprint.
   - **Mandatory:** Run the complete formal test suite after this phase. Proceed only when all tests pass, indicating that the minimal implementation meets the basic requirements.

3. **Extend the Implementation to Cover More Scenarios:**
   - Expand the functionality to handle additional scenarios and edge cases.
   - Update or add tests for these new scenarios to ensure comprehensive coverage.
   - **Mandatory:** Run the formal test suite again to verify that the extended implementation still meets all test criteria and does not break existing functionality.

4. **Enhance Code and Tests to Match Real Needs:**
   - Refine and optimize the implementation by improving performance, readability, and maintainability.
   - Enhance test coverage and detail, ensuring that tests not only check for basic functionality but also simulate realistic usage.
   - Update documentation and inline comments to reflect any modifications made during enhancement.
   - **Mandatory:** Perform a final formal test run to confirm that all improvements are correctly integrated and that the codebase remains robust and fully tested.

**Instructions:**
- Begin by scaffolding the project. List all files, modules, and components that will be part of the solution.
- Implement the minimal code required for the first user story to pass its tests.
- At each phase (scaffolding, initial implementation, extension, and enhancement), run the formal test suite and document that all tests pass before proceeding.
- Provide clear comments in your code that explain how each section corresponds to the blueprint and when the formal tests were executed.
- Avoid including any extraneous code that does not support the incremental development phases.

Proceed by scaffolding the solution, then implement the minimal viable code for the first user story, ensuring that a formal test run is executed and passes before moving forward.
